#!/usr/bin/env perl
################################################################################
#
# $Source$
#
#
# Purpose:
#
# Command line parameters:
#           
# Description:
#
# The RunType is checked so that for a geometry optimization or for
# a opt+vib calculation the coordinates are only recorded if they come
# from the gradients task.  This prevents getting multiple copies.
#
#
################################################################################

# Force output to be flushed
$| = 1;

# Stash the script arguments.
($key, $runtype, $category, $theory) = @ARGV;

local ($numAtoms,@values);

# Read blocks of Geometry {} data
while (<STDIN>) {

  if (/Geometry/i) {
    @values = ();
    $numAtoms = <STDIN>;
    $title = <STDIN>;

    $numAtoms = 0;
    while (<STDIN>) {
      last if (/}/);
      chomp;
      $numAtoms++;
      s/^ *//;
      s/ *$//;
      ($atom,$x,$y,$z) = split(/ +/,$_);
      push(@values,$x);
      push(@values,$y);
      push(@values,$z);
    }
    &printTrace($numAtoms,@values);

  } elsif (/TotalEnergy/i) {
    chop;
    s/\s*//;
    ($junk,$value) = split(/ +/,$_);
    printScalar("TEVEC",$value);
  } elsif (/Pressure/i) {
    chop;
    s/\s*//;
    ($junk,$value) = split(/ +/,$_);
    printScalar("PRESSVEC",$value);
  } elsif (/Temperature/i) {
    chop;
    s/\s*//;
    ($junk,$value) = split(/ +/,$_);
    printScalar("TEMPVEC",$value);
  } elsif (/Time/i) {
    chop;
    s/\s*//;
    ($junk,$value) = split(/ +/,$_);
    printScalar("TIMEVEC",$value);
  } elsif (/Kinetic/i) {
    chop;
    s/\s*//;
    ($junk,$value) = split(/ +/,$_);
    printScalar("KEVEC",$value);
  } elsif (/Potential/i) {
    chop;
    s/\s*//;
    ($junk,$value) = split(/ +/,$_);
    printScalar("PEVEC",$value);
  }
}


exit(0);



sub printTrace() {
  my ($numAtoms,@coords);
  ($numAtoms,@coords) = @_;

  if ($numAtoms > 0) {
    print "key: GEOMTRACE\n";
    print "size:\n";
    print "1 " . ($numAtoms) . " 3\n";
    print "rowlabels:\n";
    for ($i=0; $i<$numAtoms; $i++) { print "$i "; }
    print "\ncolumnlabels:\nX Y Z\n";
    print "values:\n";
    for ($i=0; $i<= $#coords; $i++) {
      printf("%.15e ",$coords[$i]); 
      if ($i % 3 == 2 ) { print "\n"; };
    }
    if ($i % 3 != 0 ) { print "\n"; };
    print "END\n";
  }

}


sub printScalar() {
  ($outkey,$value) = @_;
  print "key: $outkey\n";
  print "size:\n1\n";
  print "values:\n$value\n";
  print "END\n";
}

