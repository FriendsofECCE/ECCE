#ifndef TEARABLECONTENT_H_
#define TEARABLECONTENT_H_

#include <wx/bitmap.h>
#include <wx/minifram.h>
#include <wx/popupwin.h>

#include "wxgui/ewxPanel.H"


/**
 * Emulates a motif/gtk tear-off menu indicator.
 * Expands in one direction only, given by the orientation parameter.
 * Sends EVT_BUTTON events when clicked.
 */
class TearButton : public ewxPanel
{
  DECLARE_DYNAMIC_CLASS()
  DECLARE_EVENT_TABLE()

  public:
    TearButton();
    TearButton(wxWindow *parent, wxWindowID id = wxID_ANY,
               long orientation = wxHORIZONTAL);
    ~TearButton();

    bool Create(wxWindow *parent, wxWindowID id = wxID_ANY,
                long orientation = wxHORIZONTAL);

  protected:
    void OnPaint(wxPaintEvent& event);
    void OnLeftDown(wxMouseEvent& event);

    wxBitmap p_bitmap;
};



/**
 * A regular wxMiniFrame, but when dismissed it calls TransferFromWindow().
 */
class TearFrame : public wxMiniFrame
{
  DECLARE_DYNAMIC_CLASS()
  DECLARE_EVENT_TABLE()

  public:
    TearFrame();
    TearFrame(wxWindow * parent, const wxString& caption);
    ~TearFrame();

    bool Create(wxWindow * parent, const wxString& caption);

  protected:
    void OnClose(wxCloseEvent& event);
};



/**
 * Emulates a motif/gtk tear-off menu, but anything can be 'tearable'.
 *
 * Anything (e.g. wxToolBar, wxPanel, wxButton) can be set as the content
 * of this window.  Create the content as normal, then pass to this ctor.
 * The content is automatically reparented as needed.  The content's name
 * (wxWindow::GetName()) will be used as the title of the frame when torn.
 * When torn, the content becomes its own wxMiniFrame.
 *
 * Note passing in a wxMenu is a special case.  wxMenu does not inherit
 * from wxWindow so a parent must be explicitly supplied both to parent the
 * subsequent frame as well as to handle events generated by the popup.
 */
class TearableContent : public wxPopupTransientWindow
{
  DECLARE_DYNAMIC_CLASS()
  DECLARE_EVENT_TABLE()
  
  public:
    static const wxWindowID ID_TEAR;

    TearableContent(wxWindow *content);
    TearableContent(wxWindow *parent, wxMenu *menu);
    virtual ~TearableContent();

    virtual void Popup(wxWindow * focus=NULL);

  protected:
    TearableContent();

    void SetContent(wxWindow *content);

    static wxToolBar * ToolBarFromMenu(wxWindow *parent, wxMenu *menu);

    wxString GetFrameName();

    void OnTearClick(wxCommandEvent& event);
    void OnToolClick(wxCommandEvent& event);

    virtual void OnDismiss();

    wxWindow * p_content;
};

#endif // TEARABLECONTENT_H_
